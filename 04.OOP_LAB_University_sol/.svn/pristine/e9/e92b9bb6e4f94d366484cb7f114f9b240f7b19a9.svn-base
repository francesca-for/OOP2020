<!DOCTYPE html>
<html>
<head>
<link href=".css.css" rel="stylesheet" type="text/css">

<title>OOP - University Management System</title>
</head>
<body>
<h1 style="text-align: center;">University Management System</h1>

Design and implement a program to manage university courses, teachers, and students.<br>
All the classes must belong to the package <b>university</b>.
<p>

<h2 id="R1">R1. University</h2>
<p>
The user interface (not part of this assignment) interacts through the class <b>University</b>, 
whose constructor accepts as argument the name of the university.
</p><p>
The name of the university can be retrieved through method <b>getName()</b>.<p>
It is possible to assign the name of the Rector by means of the method <b>setRector()</b> 
that accepts as arguments the first and last name of the Rector.
</p><p>
The method <b>getRector()</b> returns the first and last name of the Rector concatenated and 
separated by a blank space (<i>" "</i>). 
</p>


<h2 id="R2" >R2. Students</h2>
<p>
It is possible to enter information concerning a new student thought the method 
<b>enroll()</b> of class <i>University</i>, that accepts as arguments first and last name 
of the student; the method returns the ID number that has been assigned to the student.<br>
ID numbers are are assigned progressively in each university starting from number 10000.
</p><p>
To retrieve the information about a student we can use the method <b>student()</b> 
that accepts as  an argument the ID number and returns a string made up of ID, first, 
and last name separated by blank spaces, e.g. <i>"10000 Donald Duck"</i>.
</p>

<ul class="hint">
<li>We can assume that each university has at most 1000 enrolled students.
</ul>

<h2 id="R3">R3. Courses</h2>
<p>
To define a new course we can use the method <b>activate()</b> that accepts as arguments
the title of the course and the name of the responsible teacher. The method returns an integer
that corresponds to the course code. Course codes are assigned progressively starting from 10.
</p><p>
To retrieve the information about a course we can use the method <b>course()</b> that accepts 
the course's code and returns a string containing code, title, and teacher separated by commas, 
e.g., <i>"10,Object Oriented Programming,James Gosling"</i>.
</p>

<ul class="hint">
<li>We can safely assume that any university offers no more than 50 courses.
</ul>


<h2 id="R4">R4. Course attendance</h2>
<p>
Students that wish to attend a course must be registered through the method <b>register()</b> 
that accepts as arguments the ID of the student and the course's code.
</p><p>
To get the list of students attending a course we can use the method <b>listAttendees()</b> 
that accepts the code of the course and returns a string containing the list of attendees.<br>
The students appear one per row (rows are terminated by a new-line character <i>'\n'</i>) 
and each row is formatted as describe in requirement <a href="#R2">R2</a>.
</p><p>
Given the ID of a student, it is possible to get the  list of courses she is attending
through the method <b>studyPlan()</b>. The courses are described one per row and formatted 
as described in requirement <a href="#R3">R3</a>.
</p>

<ul class="hint">
<li>We can safely assume that no course has more than 100 attendees and that each student 
can attend no more that 25 distinct courses.
</ul>

<h2 id="R5">R5. Exams</h2>
<p>
Students can take the exams for the courses in which they have been enrolled. The points for 
an exam could be registered through the method <b>exam()</b> that accepts as arguments the ID 
of the student, course code and a number of points (integer 0-100).
</p><p>
To get the number of points for a student that attended some exams, the method <b>studentAvg()</b> 
is used. It accepts as argument the ID of the student. If the student attended at least one exam 
it should return a String of the following format <i>"Student STUDENT_ID : AVG_POINTS"</i>. 
Otherwise, it should return <i>"Student STUDENT_ID hasn't taken any exams"</i>.
</p><p>
To get some additional statistics such as the average number of points per course, method 
<b>courseAvg()</b> is defined with course code as its argument. The format is the following: 
<i>"The average for the course COURSE_TITLE is: COURSE_AVG"</i>, if at least one student has 
taken the exam for that course. If this is not the case, the method should return <i>"No student has 
taken the exam in COURSE_TITLE"</i>.
</p>
<ul class="hint">
<li>It can be assumed that if a student has taken the exam, it has been enrolled previously to the 
corresponding course.
</ul>

<h2 id="R6">R6. Student award</h2>
<p>
Due to recent Corona virus epidemics, the university has decided to award top 3 students for their 
hard-work and effort. The method <i>topThreeStudents</i> is used to provide information for helping the
committee take the right decision. The students' success is evaluated on the average score of the exams 
they've taken. To take into account the number of exams each one of them has taken and not only the score, 
special bonus is assigned: on top of the average score, number of taken exams divided by the number of 
courses each student is enrolled to, multiplied by 10 is added. The students appear one per row (rows are 
terminated by a new-line character <i>'\n'</i>) and each one of them is formatted as: <i>"STUDENT_FIRSTNAME 
STUDENT_LASTNAME : SCORE"</i>.
</p>

<h2 id="R7">R7. Logger</h2>
<p>
Create a logger which will record in a file called "university_log.txt" operations performed from the 
interface through the <i>University</i> facade class. Such operations include:
<ul>
<li>enrolling a new student: <i>"New student enrolled: 10000, Mario Rossi"</i><br></li>
<li>activating a new course <i>"New course activated: 11, Object Oriented Programming James Gosling"</i><br></li>
<li>a student signing up for a course <i>"Student 10004 signed up for course 11"</i><br></li>
<li>a student taking an exam <i>"Student 10001 took an exam in course 12 and won 99 points"</i><br></li>
</ul>
</p>
<ul class="hint">
<li>Be efficient in implementing such a structure, given that a unique instance (object) is required.
Also use the following code for providing the access to a file: <br><b>FileWriter fw = new FileWriter
("university_log.txt");<br>writer = new PrintWriter(fw, true);</b> <br>
Writing to the file is done by calling the method <b>println()</b> of the <i>PrintWriter</i> class: <br><b>writer.println()</b>
</ul>

<footer>
Version 1.2 - March 19, 2019
</footer>
</body>
</html>
