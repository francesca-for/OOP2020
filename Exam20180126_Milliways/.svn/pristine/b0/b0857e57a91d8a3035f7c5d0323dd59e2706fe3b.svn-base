package it.polito.oop.milliways;

import static java.util.stream.Collectors.*;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Restaurant {
	private List<Race> races = new LinkedList<>();
	private List<Party> parties = new LinkedList<>();
	private Map<Integer, Hall> halls = new HashMap<>();

    public Restaurant() {
	}
	
	public Race defineRace(String name) throws MilliwaysException{
		if(races.stream().filter(x -> x.getName().equals(name)).findFirst().orElse(null) != null)
			throw new MilliwaysException();
		Race r = new Race(name);
		races.add(r);
	    return r;
	}
	
	public Party createParty() {
		Party p = new Party();
		parties.add(p);
	    return p;
	}
	
	public Hall defineHall(int id) throws MilliwaysException{
	    if(halls.containsKey(id))
	    	throw new MilliwaysException();
	    Hall h = new Hall(id);
	    halls.put(id, h);
	    return h;
	}

	public List<Hall> getHallList() {
		List<Hall> res = halls.values().stream().collect(Collectors.toList());
		return res;
	}

	public Hall seat(Party party, Hall hall) throws MilliwaysException {
		if(hall.isSuitable(party)==false)
			throw new MilliwaysException();
		hall.addParty(party);
        return null;
	}

	public Hall seat(Party party) throws MilliwaysException {
		Hall h = halls.values().stream().filter(x -> x.isSuitable(party)).findFirst().orElse(null);
        if(h == null)
        	throw new MilliwaysException();
        h.addParty(party);
		return h;
	}

	public Map<Race, Integer> statComposition() {
		Map<Race, Integer> res = new HashMap<>();
		
        return null;
	}

	public List<String> statFacility() {
        return null;
	}
	
	public Map<Integer,List<Integer>> statHalls() {
        return null;
	}

}
