	N O T E		U T I L I
	
		
* ORDINARE ENTRATE DI UNA MAPPA :
	posso lavorare con entrySet (coppia key-value) e poi creare un comparatore
	- List<Map.Entry<String, Integer>> entries = new LinkedList<>(mapName.entrySet());
  	                   --------  ^ da mappa a lista ---------
  	- mapName.entrySet().stream().sorted(comparing(Map.Entry<String,Long>::getValue, reverseOrder()).
				thenComparing(Map.Entry::getKey));
  
* COMPARATORI :
   - Comparator<Class/Type> cmp = Comparator.comparing(Class::getSomethingToCompare)
  				.thenComparing(Doctor::getSomethingElse);  // eventualmente come seconda chiave di ordinamento
   - Comparator<Class/Type> cmp = ( (Elem a, Elem b) -> {
  				lambdaExpression; return resDelConfronto; });
  			
  				
* RAGGRUPPARE PER UNA DATO ATTRIBUTO : collettori
	- Map<K, List<T>> groupingBy(Function<T, K> classifier)
	  Nella sua versione più semplice riceve come parametro una funzione classificatore che dato un elemento
	  di tipo T ne restituisce uno di tipo K.
	  Crea una mappa che ha come chiavi quelle restituite dal classificatore e accoda i valori a delle liste
	  che saranno i value associati alle chiavi.

    ES)  Map<String, Integer> patientsForSpecialization = doctors.values().stream()
                .collect(Collectors.groupingBy(Doctor::getSpecialization,
                			Collectors.summingInt(x -> x.getNumPatients())));
                			
      In uno stream si stringhe posso usare Collectors.joining("prefisso", "separatore", "postfisso")
      che concatena le stringhe inserendo separatore ed eventuali prefisso e postfisso.
    
    
* FUNZIONE DI MAPPING (stream) :
	- funzione map(Function<? super T, ? extends R>) degli stream
		dato un elemento dello stream posso calcolare un nuovo elemento che verrà messo in un altro stream
		posso quindi ad es. passare da stream di persone a stream di stringhe (codici fiscali)
		->  persone.stream().map( p -> p.getSsn)
		
	— flatMap(Function<? super T, ? extends Stream<? extends R>> mapper) :
		funziona come la funzione map(), ma produce un numero arbitrario (zero o più)
		valori per ciascun valore di input
		ES)   halls.stream().flatMap(f -> f.getFacilities().stream())
			 lo stream in output è composto da tutte le facilities di tutte le halls.
  
  
* (ES. lab Clinic)
	Doctor può essere anche paziente  =>  comodo trattarlo come -> Doctor extends Patient
	in questo modo può essere aggiunto alla lista dei pazienti


* LETTURA DA FILE

	


