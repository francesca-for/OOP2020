package hydraulic;

import java.util.Arrays;

/**
 * Represents the generic abstract element of an hydraulics system.
 * It is the base class for all elements.
 *
 * Any element can be connect to a downstream element
 * using the method {@link #connect(Element) connect()}.
 */
public abstract class Element {
	
	private String name;
	private Element[] outputs;
	private Element input;
//	protected boolean connected = false;
	
	/**
	 * Constructor
	 * @param name the name of the element
	 */
	public Element(String name){
		this.name = name;
		outputs = new Element[1];
	}
	
	Element(String name, int numOutputs){
		this.name = name;
		outputs = new Element[numOutputs];
	}
	
	/**
	 * getter method
	 * @return the name of the element
	 */
	public String getName(){
		return name;
	}

	/**
	 * Connects this element to a given element.
	 * The given element will be connected downstream of this element
	 * @param elem the element that will be placed downstream
	 */
	public void connect(Element elem) {
//		if(connected==true) {
//			System.out.println("Impossibile connettere " + elem.getName() + " ad un altro elemento, elemento già connesso");
//			return;
//		}
//		if(elem instanceof Source) {
//			System.out.println("Impossibile connettere sorgente in output");
//			return;
//		}
		outputs[0] = elem;
		outputs[0].setInput(this);
//		connected=true;
	}
	
	public void connect(Element elem, int noutputs){
//		if(connected==true) {
//			System.out.println("Impossibile connettere " + elem.getName() + " ad un altro elemento, elemento già connesso");
//			return;
//		}
//		if(elem instanceof Source) {
//			System.out.println("Impossibile connettere sorgente in output");
//			return;
//		}
		outputs[noutputs] = elem;
		outputs[noutputs].setInput(this);
//		connected=true;
	}
	
	/**
	 * Retrieves the element connected downstream of this
	 * @return downstream element
	 */
	public Element[] getOutputs(){
		return outputs;
	}
	
	public Element getOutput(){
		return outputs[0];
	}
	
	abstract void simulate(double inFlow, SimulationObserver observer);

//	public String getLayout() {
//		return '[' + this.getName() + ']' + this.getClass();
//	}
	
	protected abstract StringBuffer layout(String padding);

	public Element getInput() {
		return input;
	}
	
	public void setInput(Element input) {
		this.input=input;
	}
	
	protected static String blanks(int n) {
		char[] res = new char[n];
		Arrays.fill(res, ' ');
		return new String(res);
	}
	
}
