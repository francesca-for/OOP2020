package hydraulic;

/**
 * Represents a split element, a.k.a. T element
 * 
 * During the simulation each downstream element will
 * receive a stream that is half the input stream of the split.
 */

public class Split extends Element {
	
	/**
	 * Constructor
	 * @param name
	 */
	public Split(String name) {
		super(name, 2);
	}
	
	public Split(String name, int numOutput) {
		super(name, numOutput);
	}
    
//	/**
//	 * returns the downstream elements
//	 * @return array containing the two downstream element
//	 */
//    public Element[] getOutputs(){
//        return ;
//    }
//
//    /**
//     * connect one of the outputs of this split to a
//     * downstream component.
//     * 
//     * @param elem  the element to be connected downstream
//     * @param noutput the output number to be used to connect the element
//     */
//	public void connect(Element elem, int noutput){
//		output[noutput] = elem;
//	}
	
//	@Override
//	public void connect(Element elem, int noutput) {
//		super.connect(elem, noutput);
// 	}

	@Override
	protected void simulate(double inFlow, SimulationObserver observer) {
		double outFlow = inFlow/2;
		observer.notifyFlow("Split", getName(), inFlow, outFlow, outFlow);
		for(Element e : getOutputs()) {
			if(e==null)
				break;
			e.simulate(outFlow, observer);
		}
	}
	
	@Override
	public StringBuffer layout(String pad) {
		StringBuffer res = new StringBuffer();
		
		res.append("[").append(getName()).append("]Split ");
		
		String subPad = pad + blanks(res.length());

		res.append("+â€“> ").append(getOutputs()[0].layout(subPad+"|   ")).append("\n");
		
		res.append(subPad).append("|\n");
		res.append(subPad).append("+â€“> ").append(getOutputs()[1].layout(subPad + "    "));
		
		return res;
	}
	
}
